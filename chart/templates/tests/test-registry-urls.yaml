apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-test-registry-urls"
  labels:
    app: po-stamp
    test: registry-urls
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: test
      image: busybox
      command: ["/bin/sh"]
      args:
        - -c
        - |
          # Test cases
          test_cases=(
            "RegistryUrls__kebab-case=https://kebab-case-registry.com:80"
            "RegistryUrls__camelCase=https://camel-case-registry.com:443"
          )

          # Function to test a single case
          test_case() {
            local key=$1
            local expected_value=$2
            local actual_value=${!key}
            
            if [ "$actual_value" = "$expected_value" ]; then
              echo "PASS: $key is correctly set to $expected_value"
            else
              echo "FAIL: $key expected $expected_value, but got $actual_value"
              return 1
            fi
          }

          # Run all test cases
          failed_tests=0
          for case in "${test_cases[@]}"; do
            key="${case%%=*}"
            value="${case#*=}"
            if ! test_case "$key" "$value"; then
              failed_tests=$((failed_tests + 1))
            fi
          done

          # Check if any registries are set that weren't in our test cases
          env | grep '^RegistryUrls__' | while read -r line; do
            key="${line%%=*}"
            if ! echo "${test_cases[@]}" | grep -q "$key"; then
              echo "WARNING: Unexpected registry $key found"
            fi
          done

          # Final result
          if [ $failed_tests -eq 0 ]; then
            echo "All registry URL tests passed"
            exit 0
          else
            echo "$failed_tests test(s) failed"
            exit 1
          fi
      env:
        - name: RegistryUrls__kebab-case
          value: https://kebab-case-registry.com:80
        - name: RegistryUrls__camelCase
          value: https://camel-case-registry.com:443
  restartPolicy: Never
